#!/usr/bin/env node
"use strict";var e,t=require("process"),i=require("readline"),s=require("fs"),o=require("https"),r=require("url"),n=require("path"),l=require("simple-git"),a=require("timers"),h=require("yargs");class g{constructor(){this.frames=["- ","\\ ","| ","/ "],this.countLines=1}log(e,t){process.stdout.write(`${this.getHeader(t)}${e}\n`),this.countLines++}error(e,t){process.stderr.write(`${this.getHeader(t)}${e}\n`),this.countLines++}updateLog(e,t,s){const o="number"!=typeof t||Number.isNaN(t)?1:t;s="string"==typeof t&&Number.isNaN(Number.parseInt(t,10))?t:s,process.stdout.isTTY?(i.cursorTo(process.stdout,0),i.moveCursor(process.stdout,0,-o),i.clearLine(process.stdout,0),process.stdout.write(`${this.getHeader(s)}${e}`),i.cursorTo(process.stdout,0),i.moveCursor(process.stdout,0,o)):process.stdout.write(`${this.getHeader(s)}${e}\n`)}spinnerLogStart(e,t){const i=this.countLines;return this.log(e,t),{timer:this.spin(e,t,i),line:i}}spinnerLogStop(e,t,i){clearInterval(e.timer),this.updateLog(t,this.countLines-e.line,i),process.stdout.isTTY&&this.cursorShow()}spin(e,t,i){if(!process.stdout.isTTY)return;let s=0;return this.cursorHide(),setInterval((()=>{const o=this.frames[s=++s%this.frames.length];this.updateLog(`${this.getHeader(t)}${o}${e}`,this.countLines-i)}),80)}cursorShow(){process.stdout.write("[?25h")}cursorHide(){process.stdout.write("[?25l")}getHeader(e){return e?`[${e}]: `:""}}function d(e,t,i,s){return new(i||(i=Promise))((function(o,r){function n(e){try{a(s.next(e))}catch(e){r(e)}}function l(e){try{a(s.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,l)}a((s=s.apply(e,t||[])).next())}))}function c(...e){return n.posix.join(...e)}function u(e,t,i="."){return e.reduce(((e,s)=>e.concat(t.map((e=>[s,e].join(i))))),[])}function p(e){let t=n.resolve();const i=n.parse(t).root;let o=!0;for(;o;){let r;try{s.accessSync(n.resolve(t,e)),r=e}catch(e){r=void 0}if(r)return o=!1,n.join(t,r);if(t===i)return o=!1,null;t=n.dirname(t)}}function f(e,t,i){t||(t=n.resolve()),i||(i=[]);const o=s.readdirSync(t);for(const r of o){const o=n.join(t,r);s.lstatSync(o).isDirectory()&&f(e,o,i),e instanceof RegExp?e.test(o)&&i.push(o):o.includes(e)&&i.push(o)}return i}"function"==typeof SuppressedError&&SuppressedError,function(e){e[e.svg=0]="svg",e[e.png=1]="png",e[e.jpg=2]="jpg",e[e.gif=3]="gif",e[e.bmp=4]="bmp",e[e.tiff=5]="tiff",e[e.ico=6]="ico"}(e||(e={}));class m{constructor(e,t,i,s,o,r){this.wikiPageFilename=e,this.repoFilename=t,this.pargs=i,this.gitClient=s,this.logger=o,this.logGroupId=r,this.defaultPrefix="default_",this.imagesUrl=`https://github.com/${i.account}/vscode-icons/blob/master/icons/`,this.wikiUrl=`https://raw.githubusercontent.com/wiki/${i.account}/vscode-icons`}generate(){return d(this,void 0,void 0,(function*(){const e=yield this.getWikiPage(),t=this.createList(),i=this.compareLists(e,t);if("repo"===this.pargs.output&&!i)return;const s=this.createNewWikiPage(e,t);return this.tryWriteToFile(s),{filename:this.wikiPageFilename,content:s}}))}getHeaders(e){let t="";e.forEach(((i,s)=>{t+=`| ${i} ${this.getLineEnd(e,s)}`}));for(let i=0;i<e.length;i++)t+=`| :---: ${this.getLineEnd(e,i)}`;return t}getName(e){let t="| ";return e?(t+=this.pargs.useSmallFonts?"<sub>":"",t+=`[${e.icon}](#${e.icon}) `,t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t):t}getExtensions(e){let t="| ";if(!e)return t;t+=this.pargs.useSmallFonts?"<sub>":"";let i=!1;const s=e;if(e.extensions){if(void 0!==s.filename&&s.filename)t+=this.getFilenames(s);else{const i=(e,i,s)=>t+=`${this.normalize(e)}${i===s.length-1?" ":", "}`;e.extensions.forEach(((t,s)=>i(t,s,e.extensions)));s.filenamesGlob&&s.filenamesGlob.length&&s.extensionsGlob&&!!s.extensionsGlob.length&&(t=/^\|\s(?:<sub>)?/.test(t)?t:t.replace(/\s*$/,", "),u(s.filenamesGlob,s.extensionsGlob).forEach(((e,t,s)=>i(e,t,s))))}i=!!e.extensions.length}return s.languages&&s.languages.length&&(t=i?t.replace(/\s*$/,", "):t,t+=this.getLanguageIds(s)),t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t}getDarkThemeImages(t,i,s=!1){let o="| ";if(!t)return o;const r=i||this.defaultPrefix,n="string"==typeof t.format?t.format:e[t.format];return o+=`![${t.icon}_dark${s?"_closed":""}](${this.imagesUrl}${r}${t.icon}.${n}) `,s&&(o+=`| ![${t.icon}_dark_opened](${this.imagesUrl}${r}${t.icon}_opened.${n}) `),o}getLightThemeImages(t,i,s=!1,o=!1){let r="| ";if(!t)return r;const n=i||this.defaultPrefix;if(t.light||o){const i="string"==typeof t.format?t.format:e[t.format];r+=`![${t.icon}_light${s?"_closed":""}](${this.imagesUrl}${n}${t.icon}.${i}) `,s&&(r+=`| ![${t.icon}_light_opened](${this.imagesUrl}${n}${t.icon}_opened.${i}) `)}else r+="| ";return r}getLineEnd(e,t){return t===e.length-1?"|\n":""}normalize(e){const t=/[_*]/g,i=e.match(t);return i?e.replace(t,`\\${i[0]}`):e}tryWriteToFile(e){if(!e)return;const t=c("repo"===this.pargs.output?this.gitClient.wikiRepoFolder:__dirname,this.wikiPageFilename),i="repo"===this.pargs.output?t.replace(`${this.gitClient.dirname}`,""):t;this.logger.updateLog(`Writing new wiki page to: ${i}`,this.logGroupId),s.writeFileSync(t,e)}createNewWikiPage(e,t){try{this.logger.log("Starting new wiki page creation",this.logGroupId);const i=e.replace(this.getReplaceText(e),t);return this.logger.updateLog("New wiki page created",this.logGroupId),i}catch(e){throw new Error(`Failed creating new wiki page with reason: ${null==e?void 0:e.toString()}`)}}getFilenames(e){let t="";const i=(e,i,s)=>t+=`**${e}**${i===s.length-1?" ":", "}`;e.extensions.forEach(((t,s)=>i(t,s,e.extensions)));return e.filenamesGlob&&e.filenamesGlob.length&&e.extensionsGlob&&!!e.extensionsGlob.length?(t=""!==t?t.replace(/\s*$/,", "):t,u(e.filenamesGlob,e.extensionsGlob).forEach(((e,t,s)=>i(e,t,s))),t):t}getLanguageIds(e){let t="";const i=(e,i,s)=>t+=`\`${e}\`${i===s.length-1?" ":", "}`;return e.languages.forEach(((t,s)=>{Array.isArray(t.ids)?t.ids.forEach(((e,t,s)=>i(e,t,s))):i(t.ids,s,e.languages)})),t}getReplaceText(e){const t=/^\|.*\|\r\n|^\|.*\|\n/gm;let i="",s=t.exec(e);for(;s;)s.index===t.lastIndex&&t.lastIndex++,i+=s.join(),s=t.exec(e);return i}getWikiPage(){return new Promise(((e,t)=>{if("repo"===this.pargs.output)try{const t=c(this.gitClient.wikiRepoFolder,this.wikiPageFilename);this.logger.log(`Reading wiki page from: ${t.replace(`${this.gitClient.dirname}`,"")}`,this.logGroupId);const i=s.readFileSync(t).toString();return e(i)}catch(e){return t(e)}const i=`${this.wikiUrl}/${this.wikiPageFilename}`,n=this.logger.spinnerLogStart(`Requesting wiki page from: ${i}`,this.logGroupId),l=r.parse(i);o.get(l,(i=>{const s=[];if(i.on("error",(e=>{clearInterval(n.timer),t(e.stack)})).on("data",(e=>s.push(e))).on("end",(()=>(this.logger.spinnerLogStop(n,"Wiki page received",this.logGroupId),e(Buffer.concat(s).toString())))),200!==i.statusCode)return t(i.statusMessage)}))}))}compareLists(e,t){if("repo"!==this.pargs.output)return!1;this.logger.updateLog(`Checking for changes to: '${this.repoFilename}'`,this.logGroupId);const i=t.split(/\r\n|\n/gm);i[i.length-1]||i.pop();const s=this.getReplaceText(e).split(/\r\n|\n/gm);s[s.length-1]||s.pop(),this.logger.updateLog("Comparing lists",this.logGroupId);const o=!i.every(((e,t)=>e===s[t]));return this.logger.updateLog(`${o?"C":"No c"}hanges detected to: '${this.repoFilename}'`,this.logGroupId),o}}class w extends m{constructor(e,t,i,s){super("ListOfFiles.md","supportedExtensions.ts",Object.assign(Object.assign({},t),{useSmallFonts:!0}),i,s,"files"),this.files=e}createList(){const e="file_type_",t=`${e}light_`;this.logger.log("Starting list creation",this.logGroupId);let i=this.getHeaders(["Name","Extensions / Filenames / Language IDs","Preview Dark Theme","Preview Light Theme"]);return i+=this.getName(this.files.default.file),i+=this.getExtensions(this.files.default.file),i+=this.getDarkThemeImages(this.files.default.file),i+=this.getLightThemeImages(this.files.default.file_light),i+=this.getLineEnd([],-1),this.files.default.file_light&&(i+=this.getName(this.files.default.file_light),i+=this.getExtensions(this.files.default.file_light),i+=this.getDarkThemeImages(this.files.default.file_light),i+=this.getLightThemeImages(this.files.default.file_light,this.defaultPrefix,!1,!0),i+=this.getLineEnd([],-1)),this.files.supported.forEach((s=>{i+=this.getName(s),i+=this.getExtensions(s),i+=this.getDarkThemeImages(s,e),i+=this.getLightThemeImages(s,t,!1,s.light),i+=this.getLineEnd([],-1)})),this.logger.updateLog("Finished list created",this.logGroupId),i}}class $ extends m{constructor(e,t,i,s){super("ListOfFolders.md","supportedFolders.ts",t,i,s,"folders"),this.folders=e}createList(){const e="folder_type_",t=`${e}light_`;this.logger.log("Starting list creation",this.logGroupId);let i=this.getHeaders(["Name","Folder Name","Preview Closed Dark Theme","Preview Opened Dark Theme","Preview Closed Light Theme","Preview Opened Light Theme"]);return i+=this.getName(this.folders.default.folder),i+=this.getExtensions(this.folders.default.folder),i+=this.getDarkThemeImages(this.folders.default.folder,this.defaultPrefix,!0),i+=this.getLightThemeImages(this.folders.default.folder,this.defaultPrefix,!0),i+=this.getLineEnd([],-1),this.folders.default.folder_light&&(i+=this.getName(this.folders.default.folder_light),i+=this.getExtensions(this.folders.default.folder_light),i+=this.getDarkThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0),i+=this.getLightThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0,!0),i+=this.getLineEnd([],-1)),i+=this.getName(this.folders.default.root_folder),i+=this.getExtensions(this.folders.default.root_folder),i+=this.getDarkThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),i+=this.getLightThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),i+=this.getLineEnd([],-1),this.folders.default.root_folder_light&&(i+=this.getName(this.folders.default.root_folder_light),i+=this.getExtensions(this.folders.default.root_folder_light),i+=this.getDarkThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0),i+=this.getLightThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0,!0),i+=this.getLineEnd([],-1)),this.folders.supported.forEach((s=>{i+=this.getName(s),i+=this.getExtensions(s),i+=this.getDarkThemeImages(s,e,!0),i+=this.getLightThemeImages(s,t,!0),i+=this.getLineEnd([],-1)})),this.logger.updateLog("Finished list created",this.logGroupId),i}}class k{constructor(e,t){this.pargs=e,this.logger=t,this.codeRepoUrl=`https://github.com/${this.pargs.account}/vscode-icons`,this.wikiRepoUrl=`${this.codeRepoUrl}.wiki`,this.dirname=c(p("vscode-icons"),"./../../"),this.codeRepoFolder=c(this.dirname,this.pargs.account,"vscode-icons"),this.wikiRepoFolder=c(this.dirname,this.pargs.account,"vscode-icons.wiki"),this.logger=t,this.logGroupId="git"}}class v{constructor(){this.locked=!1}lock(){return new Promise((e=>{this.locked?setTimeout((()=>{e(this.lock())}),10):(this.locked=!0,e())}))}unlock(){this.locked=!1}}class y extends k{constructor(e,t){super(e,t),this.mutex=new v}getCodeRepository(){return d(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(yield this.getRepository(this.codeRepoUrl,this.codeRepoFolder,5))}))}getWikiRepository(){return d(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(this.wikiRepo=yield this.getRepository(this.wikiRepoUrl,this.wikiRepoFolder,5))}))}tryCommitToWikiRepo(e,t){return d(this,void 0,void 0,(function*(){if("repo"===this.pargs.output&&t)return this.wikiRepo||(yield this.getWikiRepository()),this.commit(this.wikiRepo,e)}))}tryPushToWikiRepo(e){return d(this,void 0,void 0,(function*(){if("repo"!==this.pargs.output)return;this.wikiRepo||(yield this.getWikiRepository());const t=yield this.addRemote(this.wikiRepo,"origin",this.wikiRepoUrl);yield this.push(this.wikiRepo,t,e)}))}getRepository(e,t,i){return e&&!s.existsSync(t)?this.cloneRepo(e,t,i):Promise.resolve(l.simpleGit(t))}cloneRepo(e,t,i){return d(this,void 0,void 0,(function*(){const s=`Cloning repo: '${e}' into '${t.replace(`${this.dirname}`,"")}'`,o=this.logger.spinnerLogStart(s,this.logGroupId);try{const r=l.simpleGit();return yield l.simpleGit().clone(e,t,i?{"--depth":i}:[]).cwd(t),this.logger.spinnerLogStop(o,s.replace("Cloning","Cloned"),this.logGroupId),r}catch(e){throw a.clearInterval(o.timer),e}}))}commit(e,t){return d(this,void 0,void 0,(function*(){const i=this.logger.spinnerLogStart("Creating commit",this.logGroupId);try{const s=/files|folders/i.exec(t),o=s&&s[0];if(!o)throw new Error("Can not determine list name");const r=`:robot: Update list of ${o.toLowerCase()}`,n={"--author":"vscode-icons-bot <vscode-icons-bot@github.com>","--date":+(Date.now()/1e3).toFixed(0)};yield this.mutex.lock();const l=yield e.commit(r,t,n);return this.mutex.unlock(),this.logger.spinnerLogStop(i,`Commit created: ${l.commit}`,this.logGroupId),!0}catch(e){throw a.clearInterval(i.timer),e}}))}addRemote(e,t,i){return d(this,void 0,void 0,(function*(){return(yield e.listRemote(["--get-url",t]))&&(yield e.removeRemote(t)),yield e.addRemote(t,i),(yield e.getRemotes(!0)).filter((e=>e.name===t))[0]}))}push(e,t,i){return d(this,void 0,void 0,(function*(){const s=i>1?"s":"",o=this.logger.spinnerLogStart(`Pushing ${i} commit${s} to: ${t.name}`,this.logGroupId),r=setTimeout((()=>{throw a.clearInterval(o.timer),new Error("Timeout on push action")}),6e4),n={"--quiet":null};try{return yield this.setCredentials(e),yield e.push(t.name,"master",n),this.logger.spinnerLogStop(o,`${i} commit${s} pushed`,this.logGroupId),clearTimeout(r),Promise.resolve(i)}catch(e){throw a.clearInterval(o.timer),e}}))}setCredentials(e){return d(this,void 0,void 0,(function*(){yield e.addConfig("credential.username",this.pargs.account),yield e.addConfig("credential.helper",`!f() { sleep 1; echo "password=${this.pargs.token}"; }; f`)}))}}class _{constructor(e){this.logger=e,this.allowedOutputs=["file","repo"],this.defaultAccount="vscode-icons";const t={out:{alias:"o",description:"The output type",required:!0,requiresArg:!0,type:"string"},account:{alias:"a",description:"The GitHub account to use",default:this.defaultAccount,requiresArg:!0,type:"string"},token:{alias:"t",description:"The GitHub token to use for pushing commits",requiresArg:!0,type:"string"}};h.usage("Usage: $0 <command> [options]").command("all","Generates the list of files and list of folders wiki page").command("files","Generates the list of files wiki page").command("folders","Generates the list of folders wiki page").demandCommand(1,"Missing command").recommendCommands().options(t).choices("out",this.allowedOutputs).help().alias("help","h").version().alias("version","V").check((e=>this.validate(e))).strict()}parse(){return d(this,void 0,void 0,(function*(){const e=yield h.parse(process.argv.splice(2));return{command:e._[0],account:e.account,output:e.out,token:e.token}}))}validate(e){return"repo"!==e.out||e.token||(h.showHelp(),this.logger.error("No token provided"),process.exit(1)),e.account!==this.defaultAccount&&this.logger.log(`Using account: ${e.account}`),!0}}(()=>{const e=new g,i=process.argv,s=process.env;let o=!0;const r=(t,i)=>{if(!o)return;const s=!!t();s&&e.log(i),o=!s};2===i.length&&(r((()=>!s.GH_TOKEN||""===s.GH_TOKEN),"GitHub token environment variable is not set"),r((()=>"Linux"!==s.RUNNER_OS),`Running on '${s.RUNNER_OS}' is not allowed`),r((()=>"push"!==s.GITHUB_EVENT_NAME&&"workflow_dispatch"!==s.GITHUB_REF_NAME),`Running on '${s.GITHUB_EVENT_NAME}' is not allowed`),r((()=>"branch"!==s.GITHUB_REF_TYPE),`Running on '${s.GITHUB_REF_TYPE}' is not allowed`),r((()=>"master"!==s.GITHUB_REF_NAME&&"main"!==s.GITHUB_REF_NAME),`Running on branch '${s.GITHUB_REF_NAME}' is not allowed`),r((()=>"vscode-icons/vscode-icons"!==s.GITHUB_REPOSITORY),`Running on '${s.GITHUB_REPOSITORY}' is not allowed`),o||t.exit(1),i.push("all","-o","repo","-t",s.GH_TOKEN)),function(){d(this,void 0,void 0,(function*(){const e=new g;try{const t=new _(e),i=yield t.parse(),s=new y(i,e),o=p("vscode-icons");if(!o)throw Error("Directory 'vscode-icons' could not be found, try cloning the repository first, in the parent directory.");const r="src(?:(?:\\/|\\\\)[a-zA-Z0-9\\s_@-^!#$%&+={}\\[\\]]+)*(?:\\/|\\\\)",n=f(new RegExp(`${r}supportedExtensions\\.js`),o)[0],l=f(new RegExp(`${r}supportedFolders\\.js`),o)[0];if(!n||!l)throw Error("Looks like 'vscode-icons' has not been build yet, try performing a build first.");const a=(yield import(n)).extensions,h=(yield import(l)).extensions;yield Promise.all([s.getCodeRepository(),s.getWikiRepository()]);let g,c=[];switch(i.command){case"all":c=yield Promise.all([new w(a,i,s,e).generate(),new $(h,i,s,e).generate()]),c=c.filter((e=>e));break;case"files":{const t=yield new w(a,i,s,e).generate();t&&c.push(t);break}case"folders":{const t=yield new $(h,i,s,e).generate();t&&c.push(t);break}}c&&(yield Promise.all(c.map((e=>d(this,void 0,void 0,(function*(){g||(g=yield s.tryCommitToWikiRepo(e.filename,e.content))})))))),g&&(yield s.tryPushToWikiRepo(c.length)),e.log("Finished")}catch(t){const i=t instanceof Error?t:new Error(t);e.error(i.stack),process.exit(1)}}))}()})();
