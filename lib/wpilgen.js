#!/usr/bin/env node
"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var t,i=e(require("readline")),s=e(require("fs")),o=e(require("https")),r=e(require("url")),n=e(require("path")),l=e(require("nodegit")),a=require("timers"),h=e(require("yargs"));class g{constructor(){this.frames=["- ","\\ ","| ","/ "],this.countLines=1}log(e,t){process.stdout.write(`${this.getHeader(t)}${e}\n`),this.countLines++}error(e,t){process.stderr.write(`${this.getHeader(t)}${e}\n`),this.countLines++}updateLog(e,t,s){const o="number"!=typeof t||Number.isNaN(t)?1:t;s="string"==typeof t&&Number.isNaN(Number.parseInt(t,10))?t:s,process.stdout.isTTY?(i.cursorTo(process.stdout,0),i.moveCursor(process.stdout,0,-o),i.clearLine(process.stdout,0),process.stdout.write(`${this.getHeader(s)}${e}`),i.cursorTo(process.stdout,0),i.moveCursor(process.stdout,0,o)):process.stdout.write(`${this.getHeader(s)}${e}\n`)}spinnerLogStart(e,t){const i=this.countLines;return this.log(e,t),{timer:this.spin(e,t,i),line:i}}spinnerLogStop(e,t,i){clearInterval(e.timer),this.updateLog(t,this.countLines-e.line,i),process.stdout.isTTY&&this.cursorShow()}spin(e,t,i){if(!process.stdout.isTTY)return;let s=0;return this.cursorHide(),setInterval(()=>{const o=this.frames[s=++s%this.frames.length];this.updateLog(`${this.getHeader(t)}${o}${e}`,this.countLines-i)},80)}cursorShow(){process.stdout.write("[?25h")}cursorHide(){process.stdout.write("[?25l")}getHeader(e){return e?`[${e}]: `:""}}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function c(e,t,i,s){return new(i||(i=Promise))((function(o,r){function n(e){try{a(s.next(e))}catch(e){r(e)}}function l(e){try{a(s.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,l)}a((s=s.apply(e,t||[])).next())}))}function d(...e){return n.posix.join(...e)}function u(e,t,i="."){return e.reduce((e,s)=>e.concat(t.map(e=>[s,e].join(i))),[])}function p(e){let t=n.resolve();const i=n.parse(t).root;let o=!0;for(;o;){let r;try{s.accessSync(n.resolve(t,e)),r=e}catch(e){r=void 0}if(r)return o=!1,n.join(t,r);if(t===i)return o=!1,null;t=n.dirname(t)}}function f(e,t,i){t||(t=n.resolve()),i||(i=[]);const o=s.readdirSync(t);for(const r of o){const o=n.join(t,r);s.lstatSync(o).isDirectory()&&f(e,o,i),e instanceof RegExp?e.test(o)&&i.push(o):o.includes(e)&&i.push(o)}return i}!function(e){e[e.svg=0]="svg",e[e.png=1]="png",e[e.jpg=2]="jpg",e[e.gif=3]="gif",e[e.bmp=4]="bmp",e[e.tiff=5]="tiff",e[e.ico=6]="ico"}(t||(t={}));class m{constructor(e,t,i,s,o,r){this.wikiPageFilename=e,this.repoFilename=t,this.pargs=i,this.gitClient=s,this.logger=o,this.logGroupId=r,this.defaultPrefix="default_",this.imagesUrl="https://github.com/vscode-icons/vscode-icons/blob/master/icons/",this.wikiUrl="https://raw.githubusercontent.com/wiki/%account%/vscode-icons"}generate(){return c(this,void 0,void 0,(function*(){const e=yield this.getWikiPage(),t=this.createList(),i=this.compareLists(e,t);if("repo"===this.pargs.output&&!i)return;const s=this.createNewWikiPage(e,t);return this.tryWriteToFile(s),{filename:this.wikiPageFilename,content:s}}))}getHeaders(e){let t="";e.forEach((i,s)=>{t+=`| ${i} ${this.getLineEnd(e,s)}`});for(let i=0;i<e.length;i++)t+="| :---: "+this.getLineEnd(e,i);return t}getName(e){let t="| ";return e?(t+=this.pargs.useSmallFonts?"<sub>":"",t+=`[${e.icon}](#${e.icon}) `,t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t):t}getExtensions(e){let t="| ";if(!e)return t;t+=this.pargs.useSmallFonts?"<sub>":"";let i=!1;const s=e;if(e.extensions){if(void 0!==s.filename&&s.filename)t+=this.getFilenames(s);else{const i=(e,i,s)=>t+=`${this.normalize(e)}${i===s.length-1?" ":", "}`;e.extensions.forEach((t,s)=>i(t,s,e.extensions)),s.filenamesGlob&&s.filenamesGlob.length&&s.extensionsGlob&&!!s.extensionsGlob.length&&(t=/^\|\s(?:<sub>)?/.test(t)?t:t.replace(/\s*$/,", "),u(s.filenamesGlob,s.extensionsGlob).forEach((e,t,s)=>i(e,t,s)))}i=!!e.extensions.length}return s.languages&&s.languages.length&&(t=i?t.replace(/\s*$/,", "):t,t+=this.getLanguageIds(s)),t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t}getDarkThemeImages(e,i,s=!1){let o="| ";if(!e)return o;const r=i||this.defaultPrefix,n="string"==typeof e.format?e.format:t[e.format];return o+=`![${e.icon}_dark${s?"_closed":""}](${this.imagesUrl}${r}${e.icon}.${n}) `,s&&(o+=`| ![${e.icon}_dark_opened](${this.imagesUrl}${r}${e.icon}_opened.${n}) `),o}getLightThemeImages(e,i,s=!1,o=!1){let r="| ";if(!e)return r;const n=i||this.defaultPrefix;if(e.light||o){const i="string"==typeof e.format?e.format:t[e.format];r+=`![${e.icon}_light${s?"_closed":""}](${this.imagesUrl}${n}${e.icon}.${i}) `,s&&(r+=`| ![${e.icon}_light_opened](${this.imagesUrl}${n}${e.icon}_opened.${i}) `)}else r+="| ";return r}getLineEnd(e,t){return t===e.length-1?"|\n":""}normalize(e){const t=/[_*]/g,i=e.match(t);return i?e.replace(t,"\\"+i[0]):e}tryWriteToFile(e){if(!e)return;const t=d("repo"===this.pargs.output?this.gitClient.wikiRepoFolder:__dirname,this.wikiPageFilename),i="repo"===this.pargs.output?t.replace(""+this.gitClient.dirname,""):t;this.logger.updateLog("Writing new wiki page to: "+i,this.logGroupId),s.writeFileSync(t,e)}createNewWikiPage(e,t){try{this.logger.log("Starting new wiki page creation",this.logGroupId);const i=e.replace(this.getReplaceText(e),t);return this.logger.updateLog("New wiki page created",this.logGroupId),i}catch(e){throw new Error("Failed creating new wiki page with reason: "+e)}}getFilenames(e){let t="";const i=(e,i,s)=>t+=`**${e}**${i===s.length-1?" ":", "}`;return e.extensions.forEach((t,s)=>i(t,s,e.extensions)),e.filenamesGlob&&e.filenamesGlob.length&&e.extensionsGlob&&!!e.extensionsGlob.length?(t=""!==t?t.replace(/\s*$/,", "):t,u(e.filenamesGlob,e.extensionsGlob).forEach((e,t,s)=>i(e,t,s)),t):t}getLanguageIds(e){let t="";const i=(e,i,s)=>t+=`\`${e}\`${i===s.length-1?" ":", "}`;return e.languages.forEach((t,s)=>{Array.isArray(t.ids)?t.ids.forEach((e,t,s)=>i(e,t,s)):i(t.ids,s,e.languages)}),t}getReplaceText(e){const t=/^\|.*\|\r\n|^\|.*\|\n/gm;let i="",s=t.exec(e);for(;s;)s.index===t.lastIndex&&t.lastIndex++,i+=s.join(),s=t.exec(e);return i}getWikiPage(){return new Promise((e,t)=>{if("repo"===this.pargs.output)try{const t=d(this.gitClient.wikiRepoFolder,this.wikiPageFilename);this.logger.log("Reading wiki page from: "+t.replace(""+this.gitClient.dirname,""),this.logGroupId);const i=s.readFileSync(t).toString();return e(i)}catch(e){return t(e)}const i=`${this.wikiUrl.replace(/%account%/,this.pargs.account)}/${this.wikiPageFilename}`,n=this.logger.spinnerLogStart("Requesting wiki page from: "+i,this.logGroupId),l=r.parse(i);o.get(l,i=>{const s=[];if(i.on("error",e=>{clearInterval(n.timer),t(e.stack)}).on("data",e=>s.push(e)).on("end",()=>(this.logger.spinnerLogStop(n,"Wiki page received",this.logGroupId),e(Buffer.concat(s).toString()))),200!==i.statusCode)return t(i.statusMessage)})})}compareLists(e,t){if("repo"!==this.pargs.output)return!1;this.logger.updateLog(`Checking for changes to: '${this.repoFilename}'`,this.logGroupId);const i=t.split(/\r\n|\n/gm);i[i.length-1]||i.pop();const s=this.getReplaceText(e).split(/\r\n|\n/gm);s[s.length-1]||s.pop(),this.logger.updateLog("Comparing lists",this.logGroupId);const o=!i.every((e,t)=>e===s[t]);return this.logger.updateLog(`${o?"C":"No c"}hanges detected to: '${this.repoFilename}'`,this.logGroupId),o}}class w extends m{constructor(e,t,i,s){super("ListOfFiles.md","supportedExtensions.ts",Object.assign(Object.assign({},t),{useSmallFonts:!0}),i,s,"files"),this.files=e}createList(){this.logger.log("Starting list creation",this.logGroupId);let e=this.getHeaders(["Name","Extensions / Filenames / Language IDs","Preview Dark Theme","Preview Light Theme"]);return e+=this.getName(this.files.default.file),e+=this.getExtensions(this.files.default.file),e+=this.getDarkThemeImages(this.files.default.file),e+=this.getLightThemeImages(this.files.default.file_light),e+=this.getLineEnd([],-1),this.files.default.file_light&&(e+=this.getName(this.files.default.file_light),e+=this.getExtensions(this.files.default.file_light),e+=this.getDarkThemeImages(this.files.default.file_light),e+=this.getLightThemeImages(this.files.default.file_light,this.defaultPrefix,!1,!0),e+=this.getLineEnd([],-1)),this.files.supported.forEach(t=>{e+=this.getName(t),e+=this.getExtensions(t),e+=this.getDarkThemeImages(t,"file_type_"),e+=this.getLightThemeImages(t,"file_type_light_",!1,t.light),e+=this.getLineEnd([],-1)}),this.logger.updateLog("Finished list created",this.logGroupId),e}}class y extends m{constructor(e,t,i,s){super("ListOfFolders.md","supportedFolders.ts",t,i,s,"folders"),this.folders=e}createList(){this.logger.log("Starting list creation",this.logGroupId);let e=this.getHeaders(["Name","Folder Name","Preview Closed Dark Theme","Preview Opened Dark Theme","Preview Closed Light Theme","Preview Opened Light Theme"]);return e+=this.getName(this.folders.default.folder),e+=this.getExtensions(this.folders.default.folder),e+=this.getDarkThemeImages(this.folders.default.folder,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.folder,this.defaultPrefix,!0),e+=this.getLineEnd([],-1),this.folders.default.folder_light&&(e+=this.getName(this.folders.default.folder_light),e+=this.getExtensions(this.folders.default.folder_light),e+=this.getDarkThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0,!0),e+=this.getLineEnd([],-1)),e+=this.getName(this.folders.default.root_folder),e+=this.getExtensions(this.folders.default.root_folder),e+=this.getDarkThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),e+=this.getLineEnd([],-1),this.folders.default.root_folder_light&&(e+=this.getName(this.folders.default.root_folder_light),e+=this.getExtensions(this.folders.default.root_folder_light),e+=this.getDarkThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0,!0),e+=this.getLineEnd([],-1)),this.folders.supported.forEach(t=>{e+=this.getName(t),e+=this.getExtensions(t),e+=this.getDarkThemeImages(t,"folder_type_",!0),e+=this.getLightThemeImages(t,"folder_type_light_",!0),e+=this.getLineEnd([],-1)}),this.logger.updateLog("Finished list created",this.logGroupId),e}}class v{constructor(e,t){this.pargs=e,this.logger=t,this.codeRepoUrl="https://github.com/%account%/vscode-icons".replace(/%account%/,this.pargs.account),this.wikiRepoUrl=this.codeRepoUrl+".wiki",this.dirname=d(p("vscode-icons"),"./../../"),this.codeRepoFolder=d(this.dirname,this.pargs.account,"vscode-icons"),this.wikiRepoFolder=d(this.dirname,this.pargs.account,"vscode-icons.wiki"),this.logGroupId="git"}getCodeRepository(){return c(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(this.codeRepo=yield this.getRepository(this.codeRepoUrl,this.codeRepoFolder))}))}getWikiRepository(){return c(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(this.wikiRepo=yield this.getRepository(this.wikiRepoUrl,this.wikiRepoFolder))}))}checkFileChanged(e){return c(this,void 0,void 0,(function*(){if("repo"===this.pargs.output)return this.codeRepo||(yield this.getCodeRepository()),this.checkForDiff(this.codeRepo,e)}))}tryCommitToWikiRepo(e,t){return c(this,void 0,void 0,(function*(){if("repo"===this.pargs.output&&t)return this.wikiRepo||(yield this.getWikiRepository()),this.commit(this.wikiRepo,e)}))}tryPushToWikiRepo(e){return c(this,void 0,void 0,(function*(){if("repo"!==this.pargs.output)return;this.wikiRepo||(yield this.getWikiRepository());let t=yield this.wikiRepo.getRemote("origin");t||(t=yield this.addRemote(this.wikiRepo,this.wikiRepoUrl)),yield this.push(t,e)}))}checkForDiff(e,t){return c(this,void 0,void 0,(function*(){const i=yield e.getMasterCommit();for(const e of yield i.getDiff())for(const i of yield e.patches()){if(new RegExp(`.*/${t}$`,"gi").test(i.newFile().path()))return!0}return!1}))}getRepository(e,t){return c(this,void 0,void 0,(function*(){return e&&!s.existsSync(t)?this.cloneRepo(e,t):l.Repository.open(t)}))}cloneRepo(e,t){return c(this,void 0,void 0,(function*(){const i=`Cloning repo: '${e}' into '${t.replace(""+this.dirname,"")}'`,s=this.logger.spinnerLogStart(i,this.logGroupId);try{const o=yield l.Clone.clone(e,t);return this.logger.spinnerLogStop(s,i.replace("Cloning","Cloned"),this.logGroupId),o}catch(e){throw a.clearInterval(s.timer),e}}))}addRemote(e,t){return l.Remote.create(e,"origin",t)}commit(e,t){return c(this,void 0,void 0,(function*(){const i=this.logger.spinnerLogStart("Creating commit",this.logGroupId);try{const s=yield e.refreshIndex();if(yield s.addByPath(t),!s.write())throw new Error("Failed writing repo index.");const o=/files|folders/i.exec(t),r=o&&o[0];if(!r)throw new Error("Can not determine list name");const n=":robot: Update list of "+r.toLowerCase(),a=+(Date.now()/1e3).toFixed(0),h=l.Signature.create("vscode-icons-bot","vscode-icons-bot@github.com",a,0),g=h,c=yield s.writeTree(),d=yield l.Reference.nameToId(e,"HEAD");return yield e.createCommit("HEAD",h,g,n,c,[d]),this.logger.spinnerLogStop(i,"Commit created: "+d.tostrS(),this.logGroupId),!0}catch(e){throw a.clearInterval(i.timer),e}}))}push(e,t){return c(this,void 0,void 0,(function*(){const i={callbacks:{credentials:()=>l.Cred.userpassPlaintextNew(this.pargs.account,this.pargs.token)}},s=t>1?"s":"",o=this.logger.spinnerLogStart(`Pushing commit${s} to: ${e.url()}`,this.logGroupId),r=setTimeout(()=>{throw a.clearInterval(o.timer),new Error("Timeout on push action")},6e4);try{const t=yield e.push(["refs/heads/master:refs/heads/master"],i);return this.logger.spinnerLogStop(o,`Commit${s} pushed`,this.logGroupId),clearTimeout(r),t}catch(e){throw a.clearInterval(o.timer),e}}))}}class k{constructor(e){this.logger=e,this.allowedOutputs=["file","repo"],this.defaultAccount="vscode-icons";const t={out:{alias:"o",description:"The output type",required:!0,requiresArg:!0,type:"string"},account:{alias:"a",description:"The GitHub account to use",default:this.defaultAccount,requiresArg:!0,type:"string"},token:{alias:"t",description:"The GitHub token to use for pushing commits",requiresArg:!0,type:"string"}};h.usage("Usage: $0 <command> [options]").command("all","Generates the list of files and list of folders wiki page").command("files","Generates the list of files wiki page").command("folders","Generates the list of folders wiki page").demandCommand(1,"Missing command").recommendCommands().options(t).choices("out",this.allowedOutputs).help().alias("help","h").version().alias("version","V").check(e=>this.validate(e)).strict()}parse(){const e=h.parse(process.argv.splice(2));return{command:e._[0],account:e.account,output:e.out,token:e.token}}validate(e){return"repo"!==e.out||e.token||(h.showHelp(),this.logger.error("No token provided"),process.exit(1)),e.account!==this.defaultAccount&&this.logger.log("Using account: "+e.account),!0}}(()=>{const e=process.argv,t=process.env;let i=!0;const s=(e,t)=>{if(!i)return;const s=!!e();s&&(new g).log(t),i=!s};if(2===e.length){if(s(()=>"true"!==t.TRAVIS_SECURE_ENV_VARS||""===t.GH_TOKEN,"Secure environment variable is not set"),s(()=>"linux"!==t.TRAVIS_OS_NAME,`Running on '${t.TRAVIS_OS_NAME}' is not allowed`),s(()=>"false"!==t.TRAVIS_PULL_REQUEST,"Running on Pull Request is not allowed"),s(()=>"master"!==t.TRAVIS_BRANCH,`Running on branch '${t.TRAVIS_BRANCH}' is not allowed`),s(()=>"vscode-icons/vscode-icons"!==t.TRAVIS_REPO_SLUG,`Running on '${t.TRAVIS_REPO_SLUG}' is not allowed`),!i)return;e.push("all","-o","repo","-t",t.GH_TOKEN)}!function(){c(this,void 0,void 0,(function*(){const e=new g;try{const t=new k(e).parse(),i=new v(t,e),s=p("vscode-icons");if(!s)throw Error("Directory 'vscode-icons' could not be found, try cloning the repository first, in the parent directory.");const o="src(?:(?:\\/|\\\\)[a-zA-Z0-9\\s_@-^!#$%&+={}\\[\\]]+)*(?:\\/|\\\\)",r=f(new RegExp(o+"supportedExtensions\\.js"),s)[0],n=f(new RegExp(o+"supportedFolders\\.js"),s)[0];if(!r||!n)throw Error("Looks like 'vscode-icons' has not been build yet, try performing a build first.");const l=require(r).extensions,a=require(n).extensions;yield Promise.all([i.getCodeRepository(),i.getWikiRepository()]);let h,g=[];switch(t.command){case"all":g=yield Promise.all([new w(l,t,i,e).generate(),new y(a,t,i,e).generate()]),g=g.filter(e=>e);break;case"files":{const s=yield new w(l,t,i,e).generate();s&&g.push(s);break}case"folders":{const s=yield new y(a,t,i,e).generate();s&&g.push(s);break}}if(g){const e=(e,t)=>c(this,void 0,void 0,(function*(){for(let i=0;i<e.length;i++)yield t(e[i],i,e)}));yield e(g,e=>c(this,void 0,void 0,(function*(){e&&(h=(yield i.tryCommitToWikiRepo(e.filename,e.content))||h)})))}h&&(yield i.tryPushToWikiRepo(g.length)),e.log("Finished")}catch(t){const i=t instanceof Error?t:new Error(t);e.error(i.stack),process.exit(1)}}))}()})();
