#!/usr/bin/env node
"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}function t(e){if(e&&e.__esModule)return e;var t={};return e&&Object.keys(e).forEach((function(i){var s=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(t,i,s.get?s:{enumerable:!0,get:function(){return e[i]}})})),t.default=e,t}var i,s=require("readline"),o=e(require("fs")),r=e(require("https")),n=e(require("url")),l=e(require("path")),a=e(require("nodegit")),h=require("timers"),g=e(require("yargs"));class c{constructor(){this.frames=["- ","\\ ","| ","/ "],this.countLines=1}log(e,t){process.stdout.write(`${this.getHeader(t)}${e}\n`),this.countLines++}error(e,t){process.stderr.write(`${this.getHeader(t)}${e}\n`),this.countLines++}updateLog(e,t,i){const o="number"!=typeof t||Number.isNaN(t)?1:t;i="string"==typeof t&&Number.isNaN(Number.parseInt(t,10))?t:i,process.stdout.isTTY?(s.cursorTo(process.stdout,0),s.moveCursor(process.stdout,0,-o),s.clearLine(process.stdout,0),process.stdout.write(`${this.getHeader(i)}${e}`),s.cursorTo(process.stdout,0),s.moveCursor(process.stdout,0,o)):process.stdout.write(`${this.getHeader(i)}${e}\n`)}spinnerLogStart(e,t){const i=this.countLines;return this.log(e,t),{timer:this.spin(e,t,i),line:i}}spinnerLogStop(e,t,i){clearInterval(e.timer),this.updateLog(t,this.countLines-e.line,i),process.stdout.isTTY&&this.cursorShow()}spin(e,t,i){if(!process.stdout.isTTY)return;let s=0;return this.cursorHide(),setInterval(()=>{const o=this.frames[s=++s%this.frames.length];this.updateLog(`${this.getHeader(t)}${o}${e}`,this.countLines-i)},80)}cursorShow(){process.stdout.write("[?25h")}cursorHide(){process.stdout.write("[?25l")}getHeader(e){return e?`[${e}]: `:""}}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function d(e,t,i,s){return new(i||(i=Promise))((function(o,r){function n(e){try{a(s.next(e))}catch(e){r(e)}}function l(e){try{a(s.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,l)}a((s=s.apply(e,t||[])).next())}))}function u(...e){return l.posix.join(...e)}function p(e,t,i="."){return e.reduce((e,s)=>e.concat(t.map(e=>[s,e].join(i))),[])}function f(e){let t=l.resolve();const i=l.parse(t).root;let s=!0;for(;s;){let r;try{o.accessSync(l.resolve(t,e)),r=e}catch(e){r=void 0}if(r)return s=!1,l.join(t,r);if(t===i)return s=!1,null;t=l.dirname(t)}}function m(e,t,i){t||(t=l.resolve()),i||(i=[]);const s=o.readdirSync(t);for(const r of s){const s=l.join(t,r);o.lstatSync(s).isDirectory()&&m(e,s,i),e instanceof RegExp?e.test(s)&&i.push(s):s.includes(e)&&i.push(s)}return i}!function(e){e[e.svg=0]="svg",e[e.png=1]="png",e[e.jpg=2]="jpg",e[e.gif=3]="gif",e[e.bmp=4]="bmp",e[e.tiff=5]="tiff",e[e.ico=6]="ico"}(i||(i={}));class w{constructor(e,t,i,s,o,r){this.wikiPageFilename=e,this.repoFilename=t,this.pargs=i,this.gitClient=s,this.logger=o,this.logGroupId=r,this.defaultPrefix="default_",this.imagesUrl="https://github.com/vscode-icons/vscode-icons/blob/master/icons/",this.wikiUrl="https://raw.githubusercontent.com/wiki/%account%/vscode-icons"}generate(){return d(this,void 0,void 0,(function*(){const e=yield this.getWikiPage(),t=this.createList(),i=this.compareLists(e,t);if("repo"===this.pargs.output&&!i)return;const s=this.createNewWikiPage(e,t);return this.tryWriteToFile(s),{filename:this.wikiPageFilename,content:s}}))}getHeaders(e){let t="";e.forEach((i,s)=>{t+=`| ${i} ${this.getLineEnd(e,s)}`});for(let i=0;i<e.length;i++)t+="| :---: "+this.getLineEnd(e,i);return t}getName(e){let t="| ";return e?(t+=this.pargs.useSmallFonts?"<sub>":"",t+=`[${e.icon}](#${e.icon}) `,t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t):t}getExtensions(e){let t="| ";if(!e)return t;t+=this.pargs.useSmallFonts?"<sub>":"";let i=!1;const s=e;if(e.extensions){if(void 0!==s.filename&&s.filename)t+=this.getFilenames(s);else{const i=(e,i,s)=>t+=`${this.normalize(e)}${i===s.length-1?" ":", "}`;e.extensions.forEach((t,s)=>i(t,s,e.extensions));s.filenamesGlob&&s.filenamesGlob.length&&s.extensionsGlob&&!!s.extensionsGlob.length&&(t=/^\|\s(?:<sub>)?/.test(t)?t:t.replace(/\s*$/,", "),p(s.filenamesGlob,s.extensionsGlob).forEach((e,t,s)=>i(e,t,s)))}i=!!e.extensions.length}return s.languages&&s.languages.length&&(t=i?t.replace(/\s*$/,", "):t,t+=this.getLanguageIds(s)),t=this.pargs.useSmallFonts?t.replace(/\s*$/,"</sub> "):t,t}getDarkThemeImages(e,t,s=!1){let o="| ";if(!e)return o;const r=t||this.defaultPrefix,n="string"==typeof e.format?e.format:i[e.format];return o+=`![${e.icon}_dark${s?"_closed":""}](${this.imagesUrl}${r}${e.icon}.${n}) `,s&&(o+=`| ![${e.icon}_dark_opened](${this.imagesUrl}${r}${e.icon}_opened.${n}) `),o}getLightThemeImages(e,t,s=!1,o=!1){let r="| ";if(!e)return r;const n=t||this.defaultPrefix;if(e.light||o){const t="string"==typeof e.format?e.format:i[e.format];r+=`![${e.icon}_light${s?"_closed":""}](${this.imagesUrl}${n}${e.icon}.${t}) `,s&&(r+=`| ![${e.icon}_light_opened](${this.imagesUrl}${n}${e.icon}_opened.${t}) `)}else r+="| ";return r}getLineEnd(e,t){return t===e.length-1?"|\n":""}normalize(e){const t=/[_*]/g,i=e.match(t);return i?e.replace(t,"\\"+i[0]):e}tryWriteToFile(e){if(!e)return;const t=u("repo"===this.pargs.output?this.gitClient.wikiRepoFolder:__dirname,this.wikiPageFilename),i="repo"===this.pargs.output?t.replace(""+this.gitClient.dirname,""):t;this.logger.updateLog("Writing new wiki page to: "+i,this.logGroupId),o.writeFileSync(t,e)}createNewWikiPage(e,t){var i;try{this.logger.log("Starting new wiki page creation",this.logGroupId);const i=e.replace(this.getReplaceText(e),t);return this.logger.updateLog("New wiki page created",this.logGroupId),i}catch(e){throw new Error("Failed creating new wiki page with reason: "+(null===(i=e)||void 0===i?void 0:i.toString()))}}getFilenames(e){let t="";const i=(e,i,s)=>t+=`**${e}**${i===s.length-1?" ":", "}`;e.extensions.forEach((t,s)=>i(t,s,e.extensions));return e.filenamesGlob&&e.filenamesGlob.length&&e.extensionsGlob&&!!e.extensionsGlob.length?(t=""!==t?t.replace(/\s*$/,", "):t,p(e.filenamesGlob,e.extensionsGlob).forEach((e,t,s)=>i(e,t,s)),t):t}getLanguageIds(e){let t="";const i=(e,i,s)=>t+=`\`${e}\`${i===s.length-1?" ":", "}`;return e.languages.forEach((t,s)=>{Array.isArray(t.ids)?t.ids.forEach((e,t,s)=>i(e,t,s)):i(t.ids,s,e.languages)}),t}getReplaceText(e){const t=/^\|.*\|\r\n|^\|.*\|\n/gm;let i="",s=t.exec(e);for(;s;)s.index===t.lastIndex&&t.lastIndex++,i+=s.join(),s=t.exec(e);return i}getWikiPage(){return new Promise((e,t)=>{if("repo"===this.pargs.output)try{const t=u(this.gitClient.wikiRepoFolder,this.wikiPageFilename);this.logger.log("Reading wiki page from: "+t.replace(""+this.gitClient.dirname,""),this.logGroupId);const i=o.readFileSync(t).toString();return e(i)}catch(e){return t(e)}const i=`${this.wikiUrl.replace(/%account%/,this.pargs.account)}/${this.wikiPageFilename}`,s=this.logger.spinnerLogStart("Requesting wiki page from: "+i,this.logGroupId),l=n.parse(i);r.get(l,i=>{const o=[];if(i.on("error",e=>{clearInterval(s.timer),t(e.stack)}).on("data",e=>o.push(e)).on("end",()=>(this.logger.spinnerLogStop(s,"Wiki page received",this.logGroupId),e(Buffer.concat(o).toString()))),200!==i.statusCode)return t(i.statusMessage)})})}compareLists(e,t){if("repo"!==this.pargs.output)return!1;this.logger.updateLog(`Checking for changes to: '${this.repoFilename}'`,this.logGroupId);const i=t.split(/\r\n|\n/gm);i[i.length-1]||i.pop();const s=this.getReplaceText(e).split(/\r\n|\n/gm);s[s.length-1]||s.pop(),this.logger.updateLog("Comparing lists",this.logGroupId);const o=!i.every((e,t)=>e===s[t]);return this.logger.updateLog(`${o?"C":"No c"}hanges detected to: '${this.repoFilename}'`,this.logGroupId),o}}class y extends w{constructor(e,t,i,s){super("ListOfFiles.md","supportedExtensions.ts",Object.assign(Object.assign({},t),{useSmallFonts:!0}),i,s,"files"),this.files=e}createList(){this.logger.log("Starting list creation",this.logGroupId);let e=this.getHeaders(["Name","Extensions / Filenames / Language IDs","Preview Dark Theme","Preview Light Theme"]);return e+=this.getName(this.files.default.file),e+=this.getExtensions(this.files.default.file),e+=this.getDarkThemeImages(this.files.default.file),e+=this.getLightThemeImages(this.files.default.file_light),e+=this.getLineEnd([],-1),this.files.default.file_light&&(e+=this.getName(this.files.default.file_light),e+=this.getExtensions(this.files.default.file_light),e+=this.getDarkThemeImages(this.files.default.file_light),e+=this.getLightThemeImages(this.files.default.file_light,this.defaultPrefix,!1,!0),e+=this.getLineEnd([],-1)),this.files.supported.forEach(t=>{e+=this.getName(t),e+=this.getExtensions(t),e+=this.getDarkThemeImages(t,"file_type_"),e+=this.getLightThemeImages(t,"file_type_light_",!1,t.light),e+=this.getLineEnd([],-1)}),this.logger.updateLog("Finished list created",this.logGroupId),e}}class v extends w{constructor(e,t,i,s){super("ListOfFolders.md","supportedFolders.ts",t,i,s,"folders"),this.folders=e}createList(){this.logger.log("Starting list creation",this.logGroupId);let e=this.getHeaders(["Name","Folder Name","Preview Closed Dark Theme","Preview Opened Dark Theme","Preview Closed Light Theme","Preview Opened Light Theme"]);return e+=this.getName(this.folders.default.folder),e+=this.getExtensions(this.folders.default.folder),e+=this.getDarkThemeImages(this.folders.default.folder,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.folder,this.defaultPrefix,!0),e+=this.getLineEnd([],-1),this.folders.default.folder_light&&(e+=this.getName(this.folders.default.folder_light),e+=this.getExtensions(this.folders.default.folder_light),e+=this.getDarkThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.folder_light,this.defaultPrefix,!0,!0),e+=this.getLineEnd([],-1)),e+=this.getName(this.folders.default.root_folder),e+=this.getExtensions(this.folders.default.root_folder),e+=this.getDarkThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.root_folder,this.defaultPrefix,!0),e+=this.getLineEnd([],-1),this.folders.default.root_folder_light&&(e+=this.getName(this.folders.default.root_folder_light),e+=this.getExtensions(this.folders.default.root_folder_light),e+=this.getDarkThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0),e+=this.getLightThemeImages(this.folders.default.root_folder_light,this.defaultPrefix,!0,!0),e+=this.getLineEnd([],-1)),this.folders.supported.forEach(t=>{e+=this.getName(t),e+=this.getExtensions(t),e+=this.getDarkThemeImages(t,"folder_type_",!0),e+=this.getLightThemeImages(t,"folder_type_light_",!0),e+=this.getLineEnd([],-1)}),this.logger.updateLog("Finished list created",this.logGroupId),e}}class k{constructor(e,t){this.pargs=e,this.logger=t,this.codeRepoUrl="https://github.com/%account%/vscode-icons".replace(/%account%/,this.pargs.account),this.wikiRepoUrl=this.codeRepoUrl+".wiki",this.dirname=u(f("vscode-icons"),"./../../"),this.codeRepoFolder=u(this.dirname,this.pargs.account,"vscode-icons"),this.wikiRepoFolder=u(this.dirname,this.pargs.account,"vscode-icons.wiki"),this.logGroupId="git"}getCodeRepository(){return d(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(this.codeRepo=yield this.getRepository(this.codeRepoUrl,this.codeRepoFolder))}))}getWikiRepository(){return d(this,void 0,void 0,(function*(){"repo"===this.pargs.output&&(this.wikiRepo=yield this.getRepository(this.wikiRepoUrl,this.wikiRepoFolder))}))}checkFileChanged(e){return d(this,void 0,void 0,(function*(){if("repo"===this.pargs.output)return this.codeRepo||(yield this.getCodeRepository()),this.checkForDiff(this.codeRepo,e)}))}tryCommitToWikiRepo(e,t){return d(this,void 0,void 0,(function*(){if("repo"===this.pargs.output&&t)return this.wikiRepo||(yield this.getWikiRepository()),this.commit(this.wikiRepo,e)}))}tryPushToWikiRepo(e){return d(this,void 0,void 0,(function*(){if("repo"!==this.pargs.output)return;this.wikiRepo||(yield this.getWikiRepository());let t=yield this.wikiRepo.getRemote("origin");t||(t=yield this.addRemote(this.wikiRepo,this.wikiRepoUrl)),yield this.push(t,e)}))}checkForDiff(e,t){return d(this,void 0,void 0,(function*(){const i=yield e.getMasterCommit();for(const e of yield i.getDiff())for(const i of yield e.patches()){if(new RegExp(`.*/${t}$`,"gi").test(i.newFile().path()))return!0}return!1}))}getRepository(e,t){return d(this,void 0,void 0,(function*(){return e&&!o.existsSync(t)?this.cloneRepo(e,t):a.Repository.open(t)}))}cloneRepo(e,t){return d(this,void 0,void 0,(function*(){const i=`Cloning repo: '${e}' into '${t.replace(""+this.dirname,"")}'`,s=this.logger.spinnerLogStart(i,this.logGroupId);try{const o=yield a.Clone.clone(e,t);return this.logger.spinnerLogStop(s,i.replace("Cloning","Cloned"),this.logGroupId),o}catch(e){throw h.clearInterval(s.timer),e}}))}addRemote(e,t){return a.Remote.create(e,"origin",t)}commit(e,t){return d(this,void 0,void 0,(function*(){const i=this.logger.spinnerLogStart("Creating commit",this.logGroupId);try{const s=yield e.refreshIndex();if(yield s.addByPath(t),!s.write())throw new Error("Failed writing repo index.");const o=/files|folders/i.exec(t),r=o&&o[0];if(!r)throw new Error("Can not determine list name");const n=":robot: Update list of "+r.toLowerCase(),l=+(Date.now()/1e3).toFixed(0),h=a.Signature.create("vscode-icons-bot","vscode-icons-bot@github.com",l,0),g=h,c=yield s.writeTree(),d=yield a.Reference.nameToId(e,"HEAD");return yield e.createCommit("HEAD",h,g,n,c,[d]),this.logger.spinnerLogStop(i,"Commit created: "+d.tostrS(),this.logGroupId),!0}catch(e){throw h.clearInterval(i.timer),e}}))}push(e,t){return d(this,void 0,void 0,(function*(){const i={callbacks:{credentials:()=>a.Cred.userpassPlaintextNew(this.pargs.account,this.pargs.token)}},s=t>1?"s":"",o=this.logger.spinnerLogStart(`Pushing commit${s} to: ${e.url()}`,this.logGroupId),r=setTimeout(()=>{throw h.clearInterval(o.timer),new Error("Timeout on push action")},6e4);try{const t=yield e.push(["refs/heads/master:refs/heads/master"],i);return this.logger.spinnerLogStop(o,`Commit${s} pushed`,this.logGroupId),clearTimeout(r),t}catch(e){throw h.clearInterval(o.timer),e}}))}}class R{constructor(e){this.logger=e,this.allowedOutputs=["file","repo"],this.defaultAccount="vscode-icons";const t={out:{alias:"o",description:"The output type",required:!0,requiresArg:!0,type:"string"},account:{alias:"a",description:"The GitHub account to use",default:this.defaultAccount,requiresArg:!0,type:"string"},token:{alias:"t",description:"The GitHub token to use for pushing commits",requiresArg:!0,type:"string"}};g.usage("Usage: $0 <command> [options]").command("all","Generates the list of files and list of folders wiki page").command("files","Generates the list of files wiki page").command("folders","Generates the list of folders wiki page").demandCommand(1,"Missing command").recommendCommands().options(t).choices("out",this.allowedOutputs).help().alias("help","h").version().alias("version","V").check(e=>this.validate(e)).strict()}parse(){const e=g.parse(process.argv.splice(2));return{command:e._[0],account:e.account,output:e.out,token:e.token}}validate(e){return"repo"!==e.out||e.token||(g.showHelp(),this.logger.error("No token provided"),process.exit(1)),e.account!==this.defaultAccount&&this.logger.log("Using account: "+e.account),!0}}(()=>{const e=process.argv,i=process.env;let s=!0;const o=(e,t)=>{if(!s)return;const i=!!e();i&&(new c).log(t),s=!i};if(2===e.length){if(o(()=>"true"!==i.TRAVIS_SECURE_ENV_VARS||""===i.GH_TOKEN,"Secure environment variable is not set"),o(()=>"linux"!==i.TRAVIS_OS_NAME,`Running on '${i.TRAVIS_OS_NAME}' is not allowed`),o(()=>"false"!==i.TRAVIS_PULL_REQUEST,"Running on Pull Request is not allowed"),o(()=>"master"!==i.TRAVIS_BRANCH,`Running on branch '${i.TRAVIS_BRANCH}' is not allowed`),o(()=>"vscode-icons/vscode-icons"!==i.TRAVIS_REPO_SLUG,`Running on '${i.TRAVIS_REPO_SLUG}' is not allowed`),!s)return;e.push("all","-o","repo","-t",i.GH_TOKEN)}!function(){d(this,void 0,void 0,(function*(){const e=new c;try{const i=new R(e).parse(),s=new k(i,e),o=f("vscode-icons");if(!o)throw Error("Directory 'vscode-icons' could not be found, try cloning the repository first, in the parent directory.");const r="src(?:(?:\\/|\\\\)[a-zA-Z0-9\\s_@-^!#$%&+={}\\[\\]]+)*(?:\\/|\\\\)",n=m(new RegExp(r+"supportedExtensions\\.js"),o)[0],l=m(new RegExp(r+"supportedFolders\\.js"),o)[0];if(!n||!l)throw Error("Looks like 'vscode-icons' has not been build yet, try performing a build first.");const a=(yield Promise.resolve().then((function(){return t(require(n))}))).extensions,h=(yield Promise.resolve().then((function(){return t(require(l))}))).extensions;yield Promise.all([s.getCodeRepository(),s.getWikiRepository()]);let g,c=[];switch(i.command){case"all":c=yield Promise.all([new y(a,i,s,e).generate(),new v(h,i,s,e).generate()]),c=c.filter(e=>e);break;case"files":{const t=yield new y(a,i,s,e).generate();t&&c.push(t);break}case"folders":{const t=yield new v(h,i,s,e).generate();t&&c.push(t);break}}if(c)for(const e of c)g=(yield s.tryCommitToWikiRepo(e.filename,e.content))||g;g&&(yield s.tryPushToWikiRepo(c.length)),e.log("Finished")}catch(t){const i=t instanceof Error?t:new Error(t);e.error(i.stack),process.exit(1)}}))}()})();
